<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 湖心小筑 - Praying&#39;s Blog</title>
    <link>https://praying.github.io/post/</link>
    <description>Recent content in Posts on 湖心小筑 - Praying&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 04 Oct 2018 17:34:10 +0800</lastBuildDate>
    
	<atom:link href="https://praying.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二叉树非递归遍历实现</title>
      <link>https://praying.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 04 Oct 2018 17:34:10 +0800</pubDate>
      
      <guid>https://praying.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9D%9E%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%E5%AE%9E%E7%8E%B0/</guid>
      <description>主要是前序，中序和后序的非递归遍历 #include &amp;lt;gtest/gtest.h&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;memory&amp;gt; template&amp;lt;typename T&amp;gt; struct BTNode { BTNode *left = nullptr; BTNode *right = nullptr; T data; }; template&amp;lt;typename T&amp;gt; void visit(BTNode&amp;lt;T&amp;gt; *node, std::vector&amp;lt;T&amp;gt; &amp;amp;result) { if (node) result.push_back(node-&amp;gt;data); } template&amp;lt;typename T&amp;gt; void pre_order_non_recursion(BTNode&amp;lt;T&amp;gt; *node, std::vector&amp;lt;T&amp;gt; &amp;amp;result) { if (nullptr == node) { return; } std::stack&amp;lt;BTNode&amp;lt;T&amp;gt; *&amp;gt; node_stack; node_stack.push(node);</description>
    </item>
    
    <item>
      <title>KMP算法简单实现</title>
      <link>https://praying.github.io/post/kmp%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 04 Oct 2018 17:32:30 +0800</pubDate>
      
      <guid>https://praying.github.io/post/kmp%E7%AE%97%E6%B3%95%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>看了B站一个外国小哥讲解的视频，随手撸了一个，只用了一个测试，不保证完全正确，仅供参考。 B 站视频链接 #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; void constructNext(const string&amp;amp; pattern, vector&amp;lt;int&amp;gt;&amp;amp; next){ next.clear(); next.resize(pattern.size()); int j =</description>
    </item>
    
  </channel>
</rss>